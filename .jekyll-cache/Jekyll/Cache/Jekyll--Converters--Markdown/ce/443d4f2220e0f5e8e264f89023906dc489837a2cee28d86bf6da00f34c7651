I" O<h1 id="docker---hello-world">Docker - Hello world</h1>

<p><img src="img/1__GU8Zdm__oyCWhxSmDNguxbA.jpeg" alt="" /></p>

<p>ავტორები: <a href="https://medium.com/u/c0fbcc820d6d">Aleksi Kistauri</a>, <a href="https://medium.com/u/6498150f0037">Nikoloz Bokeria</a></p>

<h3 id="რა-არისდოკერი">რა არის დოკერი?</h3>

<p>შენ ალბათ უკვე გაგიგია დოკერის შესახებ და გიფიქრია, თუ რაში შეიძლებოდა გამოგეყენებინა ის. ამ სტატიაში, სწორედ ამ კითხვაზე გაგცემთ პასუხს.</p>

<p>დოკერი არის <strong>კონტეინერიზაციის</strong> პლატფორმა (Runtime environmet), რომელიც გაძლევს საშუალებას, აპლიკაციისთვის შექმნა იზოლირებული გარემო, სადაც აპლიკაციასთან ერთად თავს მოუყრი მის მოდულებს(<strong>dependencies</strong>), კონფიგურაციის ფაილებს და ა.შ. რომლებიც საჭიროა აღნიშნული აპლიკაციის გასაშვებად.</p>

<p>დოკერი ასევე შეიძლება გამოიყენო მაშინ, როდესაც გინდა აპლიკაციის გაშვება უკვე არსებულ გარემოში, რამაც შეიძლება გამოიწვიოს კონფლიქტი.</p>

<p>მაგალითად გაქვს სერვერი, სადაც გაშვებულია აპლიკაცია, რომელიც იყენებს <strong>Node 6</strong> ვერსიას, მაგრამ გინდა გაუშვა ახალი აპლიკაცია - იგივე სერვერზე, <strong>Node 12</strong> ვერსიით. კონტეინერიზაციის შემთხვევაში, თითოეულ აპლიკაციას ექნება იზოლირებული გარემო, შესაბამისად სხვა და სხვა <strong>Node</strong>-ის ვერსიაც, რაც არ დაუშვებს ვერსიათა კონფლიქტს.</p>

<h3 id="რა-არის-კონტეინერი">რა არის კონტეინერი?</h3>

<p><img src="img/1__bOrphmm1BtsoUc9rND7lmw.png" alt="" /></p>

<p>როგორც უკვე ავღნიშნეთ, კონტეინერი არის იზოლირებული გარემო, რომლისთვისაც კომპიუტერი გამოყოფს შესაბამის რესურსებს (<strong>Network, hardware …</strong>)</p>

<p>შესაძლოა მანქანაზე იყოს გაშვებული ბევრი კონტეინერი, სხვა და სხვა აპლიკაციებით. რომელთა ცვლილება არ აისახება სხვა კონტეინერებზე.</p>

<p><img src="img/1__UEmLmenrxKp0Hwid4xxGwQ.png" alt="" /></p>

<h3 id="დოკერი-არ-არის-ვირტუალური-მანქანა"><strong>დოკერი არ არის ვირტუალური მანქანა !</strong></h3>

<p><img src="img/1__8rLp2Zg1d3ablZg0MOPQag.png" alt="" /></p>

<p>ვირტუალური მანქანისგან განსხვავებით, კონტეინერი, არ საჭიროებს მისთვის გამოყოფილ ოპერაციულ სისტემას. ის იყენებს კერნელის ფუნქციონალს და გააჩნია საკუთარი <strong><em>namespace</em></strong> (გამოყოფილი რესური) რაც ნიშნავს იმას, რომ <strong>Network</strong>, <strong>Memory</strong> და ა.შ.გამოყოფს პატარა ნაწილს კონტეინერისთვის.</p>

<h3 id="დოკერის-ინსტალაცია">დოკერის ინსტალაცია</h3>

<blockquote>
  <p>თუ შენ იყენებ <strong>OS X</strong>-ს ან <strong>Windows</strong>-ს დოკერი ავტომატურად დააინსტალირებს <strong>Linux</strong>-ის ვირტუალურ მანქანას.</p>
</blockquote>

<p><strong>OS X</strong> -ზე დასაყენებლად გვაქვს ორი ვარიანტი:</p>

<ol>
  <li><strong>Homebrew</strong> — ის გამოყენებით, რომელიც ცოტა კომპლექსური პროცედურაა, რადგან ხელით გვიწევს ვირტუალური მანქანის დაყენება და კონფიგურაცია. <a href="https://medium.com/@yutafujii_59175/a-complete-one-by-one-guide-to-install-docker-on-your-mac-os-using-homebrew-e818eb4cfc3">installation docker with homebrew</a></li>
  <li>შეგიძლია ჩამოტვირთო <strong>DMG</strong>- ფაილი და დააყენო როგორც აპლიკაცია — <a href="https://docs.docker.com/docker-for-mac/install/">https://docs.docker.com/docker-for-mac/install/</a></li>
</ol>

<p><strong>Linux (Debian)</strong></p>

<p>sudo apt update</p>

<p>sudo apt install apt-transport-https ca-certificates curl software-properties-common</p>

<table>
  <tbody>
    <tr>
      <td>curl -fsSL https://download.docker.com/linux/ubuntu/gpg</td>
      <td>sudo apt-key add -</td>
    </tr>
  </tbody>
</table>

<p>sudo add-apt-repository “deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable”</p>

<p>sudo apt update</p>

<p>apt-cache policy docker-ce</p>

<p>sudo apt install docker-ce</p>

<p><strong>Windows</strong> </p>

<p><strong>Windows</strong>-ის შემთხვევაში დოკერის ინსტალაცია შესაძლებელია მხოლოდ შემდეგ ვერსიებზე: <strong>Windows 10 64-bit: Pro, Enterprise, ან Education (Build 15063).</strong></p>

<p>.<strong>EXE</strong> ფაილის ჩამოტვირთვა შესაძლებელია ლინკიდან — <a href="https://hub.docker.com/?overlay=onboarding">https://hub.docker.com/?overlay=onboarding</a></p>

<p><strong>შევამოწმოთ დაყენდა თუ არა დოკერი:</strong></p>

<p># გახსენი <strong>CMD</strong> ან <strong>Terminal</strong>-ი და გაუშვი:</p>

<p>docker -v</p>

<p><img src="img/1__K6Xdw5C08UPVHXeoA74__Tg.png" alt="" /></p>

<h3 id="get-hands-dirty">Get hands dirty !</h3>

<p>გავუშვათ პირველი <strong>Docker</strong> <strong>image</strong></p>

<p>docker run hello-world</p>

<p><img src="img/1__knvXxjVSRrurkDajz9nOxg.png" alt="" /></p>

<p>როდესაც გაუშვებ ამ <strong>Command</strong>-ს, დოკერი თავდაპირველად შეამოწმებს არის თუ არა აღნიშნული <strong><em>image</em></strong> ლოკალურად.</p>

<p>ჩვენ შემთხვევაში, <strong>hello-world</strong> ის <strong>image</strong> არ გვაქვს, ამიტომ ვიღებთ შეტყობინებას :</p>

<blockquote>
  <p><strong>Unable to find image ‘hello-world:latest’ locally</strong></p>
</blockquote>

<p>დოკერი ავტომატურად ჩამოტვირთავს <a href="https://hub.docker.com/"><strong>hub.docker.com</strong></a> — იდან ჩვენს <strong>image</strong>-ს.</p>

<p><a href="https://hub.docker.com"><strong>Docker Hub </strong></a>—  არის <strong>Docker</strong>-ის სერვისი, სადაც განთავსებულია სხვა და სხვა კონტეინერების <strong>image</strong>-ები (<strong>image</strong>- ზე მოგვიანებით ვილაპარაკოთ) </p>

<p><strong>Docker Hub</strong> - ზე შეგვიძლია ავტვირთოთ საკუთარი <strong>Image</strong>-ები ან გამოვიყენოთ უკვე ატვირთული <strong>Image</strong>-ები როგორიცაა: <strong>Ngnix</strong>, <strong>Node</strong>, <strong>Redis</strong> და ა.შ.</p>

<p>როდესაც <strong>Image</strong> ჩამოიტვირთება გაეშვება კონტეინერი, რომელიც გამოიტანს ეკრანზე შემდეგ შეტყობინებას:</p>

<p><img src="img/1__EHkzaY____rq4pNgreaeE4Yw.png" alt="" /></p>

<h3 id="პრაქტიკული-მაგალითი">პრაქტიკული მაგალითი</h3>

<p><strong>Image</strong> ებისა და კონტეინერების უკეთესად გასაგებად, განვიხილოთ პრაქტიკული მაგილითი.</p>

<p>შევქმნათ <strong>Node</strong>-ის აპლიკაცია, რომელიც უბრალოდ დაგვიბრუნებს <strong>Hello from container!</strong> - ს.</p>

<blockquote>
  <p><a href="https://github.com/nikolozz/docker_simple_app"><strong>https://github.com/nikolozz/docker_simple_app</strong></a></p>
</blockquote>

<p><img src="https://cdn-images-1.medium.com/max/1200/1*UfAMo1xBr-dg0I6xc1xRbw.png" alt="https://github.com/nikolozz/docker_simple_app" /></p>

<p>იმისათვის, რომ აპლიკაცია გავუშვათ საჭიროა კონტეინერის <strong>Image</strong>. </p>

<p><strong>Image</strong>-ის შესაქმნელათ ვწერთ <strong>Dockerfile</strong>-ს(<strong>root</strong> ფოლდერში) სადაც უნდა ავღწეროთ პროცესი, თუ როგორ უნდა შეიქმნას ჩვენი აპლიკაცია.</p>

<p><img src="img/1__USukYA__4y8ZMmPChCgqdIw.png" alt="" /></p>

<blockquote>
  <p>Dockerfile — ს არ ჭირდება არანაირი გაფართოება (<strong>.txt, .js, .sh</strong> …)</p>
</blockquote>

<p><img src="img/1__bQqFa5R__16R4yaEvuaMwkw.png" alt="" /></p>

<p>FROM node:alpine</p>

<p><strong>FROM</strong> — ის მეშვეობით განვსაზღვრავთ <strong>base image</strong>-ს, რადგან ჩვენი აპლიკაცია არის <strong>Node</strong>-ზე <strong>base image</strong>-ად ვიყენებთ <a href="https://hub.docker.com/_/node/">node:alpine</a> -ს.</p>

<p>რადგან აქ უკვე დაყენებულია <strong>npm</strong> და <strong>Node.js</strong>, მაგალითად თუ <strong>base</strong> <strong>image</strong>-ად განვსაზღვრავდით <strong>Ubuntu</strong>-ს, ხელით მოგვიწევდა <strong>Node</strong>-ისა და <strong>npm</strong> ის დაყენება.</p>

<p>ასევე, <strong>Ubuntu</strong> -ს <strong>base image 1GB</strong>-ზე მეტია, ხოლო <strong>node:alpine</strong> 80 <strong>MB</strong></p>

<p>WORKDIR /app</p>

<p>თუ შევალთ კონტეინერში და ვნახავთ ფაილებს, შევამჩნევთ ლინუქსის ფაილურ სტრუქტურას, რადგან <strong>base image</strong> ად <strong>node:alpine</strong>- გვაქვს გამოყენებული.</p>

<blockquote>
  <p>ფაილური სტრუქტურა დამოკიდებულია <strong>base image</strong>-ზე</p>
</blockquote>

<p>აღნიშნული <strong>Command</strong> შექმნის ფოლდერს სახელად <strong>app</strong>, სადაც იქნება ჩვენი აპლიკაციის ფაილები.</p>

<p><img src="img/1__rNbP9zxwgAjSn2vZG7F5GQ.png" alt="" /></p>

<p>COPY ./package.json ./<br />
RUN npm i<br />
COPY . .</p>

<p><strong>COPY</strong> გვაძლევს საშუალებას გადავიტანოთ ლოკალური ფაილები კონტეინერში. ამ შემთხვევაში გადაგვაქვს <strong>package.json</strong>, სადაც გვაქვს <strong>Dependency</strong> ები, რომლებსაც შემდეგ ვაყენებთ <strong>npm i </strong>— ით (<strong>npm install</strong>)</p>

<p><strong>RUN</strong> ის გამოყენებით შეგვიძლია გავუშვათ ნებისმიერი <strong>Command</strong>, მაგალითად <strong>npm</strong></p>

<p><strong>npm</strong> — უნდა იყოს <strong>base image</strong> ში.</p>

<p>რის შემდეგაც ვაკოპირებთ ყველა ფაილს კონტეინერში.</p>

<blockquote>
  <p>იმისათვის, რომ <strong>node_modules</strong> არ დაკოპირდეს კონტეინერში, ვქმნით .<strong>dockerignore</strong>-ს და ვწერთ <strong>node_modules</strong>/ -ს </p>
</blockquote>

<p><img src="img/1__urjtRGp3WH__6ICxGTWgvPQ.png" alt="" /></p>

<p>CMD [ “npm”, “start” ]</p>

<p><strong>CMD</strong> -ის გამოყენებით განვსაზღვრავთ <strong>Command</strong>-ს, რომელიც გაეშვება კონტეინერის დასტარტვის დროს.</p>

<p>ჩვენ დავწერეთ <strong>Dockerfile</strong>, რის მიხედვითაც შევქმნით <strong>image</strong>-ს და გავუშვებთ ჩვენ აპლიკაციას.</p>

<p><img src="img/1__1ADybfejRF4UGrdNZciQnA.png" alt="" /></p>

<p>იმისათვის რომ დავბილდოთ <strong>Image</strong>, გადავდივართ იმ დირექტორიაში სადაც <strong>Dockerfile</strong> არის განთავსებული და ვუშვებთ შემდეგ <strong>Command</strong>-ს</p>

<p>docker build -t myapp .</p>

<p><img src="img/1__WEgv59nsYwPR82673j1aVQ.png" alt="" /></p>

<p><strong>docker build</strong>- ს პარამეტრად შეგვიძლია გადავცეთ <strong>-t</strong> (<strong>tag</strong>), რაც იქნება ჩვენი <strong>Image</strong>-ის სახელი, თუ არ გადავცემთ <strong>tag name</strong> -ს დოკერი ავტომატურად მიანიჭებს რენდომ <strong>tag name</strong>-ს.</p>

<p>ასევე, ბოლოში აუცილებლად ვწერთ წერტილს(<strong>.</strong>)-ს რაც განსაზღვრავს კონტექსტს..</p>

<p><img src="img/1__YTR1Jjs2RnimDAzR5NQ5Ww.png" alt="" /></p>

<p>თუ გავუშვებთ <strong>Command</strong>-ს</p>

<p>docker images</p>

<p> ვნახავთ რომ შეიქმნა ორი ახალი <strong>image</strong> - <strong>myapp</strong> და <strong>node</strong>(რადგან უკვე დაყენებული მქონდა, ქეშიდან აიღო)</p>

<p>იმისათვის, რომ კონტეინერი გავუშვათ ვიყენებთ <strong>Command</strong>-ს:</p>

<p>docker run myapp <strong>#</strong>(სადაც myapp თქვენი image-ს სახელია).</p>

<p><img src="img/1__u__iO6vnzpL2ODOpp805nHw.png" alt="" /></p>

<p>გაშვებული კონტეინერების სანახავად ვუშვებთ <strong>Command</strong>-ს:</p>

<p>docker ps</p>

<p>თუ ჩვენ შევეცდებით <strong>localhost:8000</strong>-ზე შესვლას გვიჩვენებს <strong>Network error</strong>-ს რადგან როგორც უკვე ვახსენეთ, კონტეინერი არის იზოლირებულ გარემოში.</p>

<p><img src="img/1__ToIhNQWopIDnXdgsfcHgew.png" alt="" /></p>

<p>იმისათვის, რომ დავამყაროთ კონტეინერთან კავშირი უნდა გავხსნათ პორტი.</p>

<p>რისთვისაც <strong>docker run</strong> ს უნდა გადავცეთ დამატებით პარამეტრი <strong>-p 8000:8000</strong></p>

<p>რაც ნიშნავს იმას, რომ <strong>8000</strong> პორტიდან ვუკავშირდებით კონტეინერის <strong>8000</strong> პორტს.</p>

<p>docker run -p 8000:8000 myapp</p>

<p><img src="img/1__Jnh0RyutyVPVnCuqxAGe0A.png" alt="" /></p>

<p>პორტის მითითების შემდეგ დავინახავთ, რომ კონტეინერს მიენიჭა პორტი და შეგვიძლია ჩვენი აპლიკაცია გავხსნათ.</p>

<p><img src="img/1__tRvPIyp3RNgdX__rbkVCQ0w.png" alt="" /></p>

<h3 id="და-მაინც-რატომ-დოკერი">და მაინც, რატომ დოკერი? 🤔</h3>

<p>დოკერმა დეველოპმენტ პროცესებში ძალიან ბევრი რამ შეცვალა, მან ბევრად უფრო გაამარტივა დეპლოიმენტი. </p>

<p>დღესდღეობით ძალიან ბევრი სერვისი (<strong>AWS ECS, AWS EKS, AWS Elastic beanstallk, GKE</strong> და ა.შ.)არსებობს, რომლებშიც შეგვიძლია ავტვირთოთ, ჩვენი კონტეინერები და მარტივად მოვაგვაროთ ისეთი პრობლემა როგორიცაა სქეილინგი. </p>

<p>რაც ნიშნავს იმას, რომ აპლიკაციის დატვირთვის ზრდასთან ერთად მარტივად შეგვიძლია დავსტარტოთ დამატებითი კონტეინერები.</p>

:ET